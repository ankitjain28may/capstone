Description:  This template deploys a VPC, with a pair of public and private subnets. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a NAT gateway and default routes for them in the private subnet.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  
  TagName:
    Description: Name of the application
    Type: String

  Owner:
    Description: Name of the Owner
    Type: String
  
  InternetCIDR:
    Type: String
    Default: 0.0.0.0/0

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Ref TagName
        - Key: Owner
          Value: !Ref Owner
        - Key: Environment
          Value: !Ref EnvironmentName

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties: 
      Name: eks-cluster
      ResourcesVpcConfig: 
        SubnetIds:
          - Fn::ImportValue: !Sub "${EnvironmentName}-Pri-Subnet-1"
          - Fn::ImportValue: !Sub "${EnvironmentName}-Pri-Subnet-2"
        SecurityGroupIds:
          - !Ref EKSClusterControlPlaneSecurityGroup
      RoleArn: 
        Fn::GetAtt: [ EKSClusterRole, Arn ]
      Version: '1.15'
  
  EKSClusterControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC-ID"
      GroupDescription: "EKS created security group applied to ENI that is attached to EKS Control Plane master nodes, as well as any managed workloads."
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref InternetCIDR
      Tags:
        - Key: Name
          Value: !Ref TagName
        - Key: Owner
          Value: !Ref Owner
        - Key: Environment
          Value: !Ref EnvironmentName
  
  EKSClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: '-1'
      GroupId: !Ref EKSClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref EKSClusterControlPlaneSecurityGroup

Outputs:

  EKSClusterRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: !Sub "${EnvironmentName}-EKSClusterRoleArn"
  
  EKSClusterControlPlaneSecurityGroupId:
    Value: !GetAtt EKSClusterControlPlaneSecurityGroup.GroupId
    Export:
      Name: !Sub "${EnvironmentName}-EKSClusterControlPlaneSecurityGroupId" 